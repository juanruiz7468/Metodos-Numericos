from logging import raiseExceptions
import numpy as np
from google.colab import drive
drive.mount('/content/drive')
def funcion(x):
  return np.sin(10*x)+np.cos(3*x)
def Metodo_De_Biseccion(x1, x2, tolerancia):
    if funcion(x1) * funcion(x2) >= 0:
        raise ValueError("La función debe tener signos opuestos en los extremos del intervalo.")

    while True:
        x3 = (x1 + x2) / 2.0
        if 0 <= funcion(x3) < tolerancia:
            return x3
        if funcion(x1) * funcion(x3) < 0:
            x2 = x3
        else:
            x1 = x3
def Metodo_De_La_Falsaposicion(x1,x2,tolerancia):
  if funcion(x1) * funcion(x2) >= 0:
    raise ValueError("La función debe tener signos opuestos en los extremos del intervalo.")

  while True:
    x3 = x2 - (funcion(x2) * (x1 - x2)) / (funcion(x1) - funcion(x2))
    print(x3)
    if funcion(x1)*funcion(x3)<tolerancia:
      return x3
    if funcion(x1) * funcion(x3) < 0:
      x2 = x3
    else:
      x1 = x3
def Metodo_De_La_Falsaposicion_Modificado(x1,x2,tolerancia):
    funcion_inferior=funcion(x1)
    funcion_superior=funcion(x2)
    estancamiento_inferior=0
    estancamiento_superior=0
    if funcion(x1) * funcion(x2) >= 0:
      raise ValueError("La función debe tener signos opuestos en los extremos del intervalo.")
    while True:
      x3 = x2 - (funcion_superior * (x1 - x2)) / (funcion_inferior - funcion_superior)
      funcion_cambiante=funcion(x3)
      print(x3)
      if funcion_inferior*funcion_cambiante<tolerancia:
        return x3
      if funcion_inferior*funcion_cambiante< 0:
        x2 = x3
        funcion_superior=funcion(x2)
        estancamiento_inferior+=1
        estancamiento_superior=0
        if estancamiento_inferior>=2:
          funcion_inferior=funcion_inferior/2
      else:
        x1 = x3
        funcion_inferior=funcion(x1)
        estancamiento_superior+=1
        estancamiento_inferior=0
        if estancamiento_superior>=2:
          funcion_superior=funcion_superior/2
def Busqueda_Por_Incrementos(x1,x2,incrementos,tolerancia):
  raiz=[]
  while x1<=x2:
    if funcion(x1)<0:
      signo1=0
    else:
      signo1=1
    x=float(x1)
    while True:
      if funcion(x)<0:
        signo2=0
        if signo2!=signo1:
          raices=Metodo_De_La_Falsaposicion_Modificado(x1,x,tolerancia)
          raiz.append(raices)
          x1=x
          break
      else:
        signo2=1
        if signo2!=signo1:
          raices=Metodo_De_La_Falsaposicion_Modificado(x1,x,tolerancia)
          raiz.append(raices)
          x1=x
          break
      x+=incrementos
  return raiz
Busqueda_Por_Incrementos(4.2,4.3,0.0001,1e-6)
drive.flush_and_unmount()
